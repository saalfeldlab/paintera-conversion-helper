<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.scijava</groupId>
        <artifactId>pom-scijava</artifactId>
        <version>37.0.0</version>
    </parent>

    <groupId>org.janelia.saalfeldlab</groupId>
    <artifactId>paintera-conversion-helper</artifactId>
    <version>1.2.0-SNAPSHOT</version>

    <name>Paintera-Conversion-Helper</name>
    <description>Command line tool to convert datasets to and from paintera friendly formats</description>
    <url>https://github.com/saalfeldlab/paintera-conversion-helper</url>
    <inceptionYear>2018</inceptionYear>
    <organization>
        <name>HHMI Janelia</name>
        <url>https://janelia.org</url>
    </organization>
    <licenses>
        <license>
            <name>GNU General Public License v2.0</name>
        </license>
    </licenses>

    <properties>
        <enforcer.skip>true</enforcer.skip>
        <extra-enforcer-rules.version>1.9.0</extra-enforcer-rules.version>
        <main-class>org.janelia.saalfeldlab.conversion.PainteraConvert</main-class>

        <license.licenseName>GNU General Public License v2.0</license.licenseName>
        <license.copyrightOwners>Philipp Hanslovsky, Stephan Saalfeld</license.copyrightOwners>

        <!-- NB: Deploy releases to the SciJava Maven repository. -->
        <releaseProfiles>sign,deploy-to-scijava</releaseProfiles>
        <package-name>org.janelia.saalfeldlab.conversion</package-name>


        <scijava.jvm.version>17</scijava.jvm.version>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <kotlin.compiler.jvmTarget>${scijava.jvm.version}</kotlin.compiler.jvmTarget>
        <kotlin.version>1.9.24</kotlin.version>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>

        <n5.version>3.3.1</n5.version>
        <n5-aws-s3.version>4.2.2</n5-aws-s3.version>
        <n5-google-cloud.version>4.1.2</n5-google-cloud.version>
        <n5-universe.version>2.0.1</n5-universe.version>
        <n5-zarr.version>1.4.0</n5-zarr.version>
        <n5-hdf5.version>2.2.0</n5-hdf5.version>
        <n5-imglib2.version>7.0.0</n5-imglib2.version>
        <imglib2-label-multisets.version>0.14.0</imglib2-label-multisets.version>
        <label-utilities-spark.version>1.1.0</label-utilities-spark.version>
        <n5-spark.version>4.0.0</n5-spark.version>
        <spark.version>3.5.4</spark.version>
        <spark-core_2.12.version>${spark.version}</spark-core_2.12.version>
        <jackson.version>2.15.4</jackson.version>

        <junit-jupiter.version>5.11.2</junit-jupiter.version>

        <!-- For JPackage -->
        <app.version>1.2.0</app.version>
        <app.name>paintera-convert</app.name>
        <jvm.modules>java.naming,java.management,java.sql</jvm.modules>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <windows.upgrade.uuid>f918b6f9-8685-4b50-9fbd-9be7a1209249</windows.upgrade.uuid>
        <macos.sign />
        <macos.sign.identity />
    </properties>

    <developers>
        <developer>
            <id>hulbertc</id>
            <name>Caleb Hulbert</name>
            <email>hulbertc@janelia.hhmi.org</email>
            <url />
            <organization>HHMI Janelia</organization>
            <organizationUrl>https://janelia.org/</organizationUrl>
            <roles>
                <role>lead</role>
                <role>developer</role>
                <role>maintainer</role>
            </roles>
            <timezone>-5</timezone>
        </developer>
        <developer>
            <id>hanslovsky</id>
            <name>Philipp Hanslovsky</name>
            <email>hanslovskyp@janelia.hhmi.org</email>
            <url />
            <organization>HHMI Janelia</organization>
            <organizationUrl>https://janelia.org/</organizationUrl>
            <roles>
                <role>founder</role>
                <role>developer</role>
            </roles>
            <timezone>-5</timezone>
        </developer>
        <developer>
            <id>nthistle</id>
            <name>Neil Thistlethwaite</name>
            <email>thistlethwaiten@janelia.hhmi.org</email>
            <url />
            <organization>HHMI Janelia</organization>
            <organizationUrl>https://janelia.org/</organizationUrl>
            <roles>
                <role>developer</role>
            </roles>
            <timezone>-5</timezone>
        </developer>
    </developers>

    <mailingLists>
        <mailingList>
            <name>ImageJ Forum</name>
            <archive>https://forum.image.sc/</archive>
        </mailingList>
    </mailingLists>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/saalfeldlab/paintera-conversion-helper/issues</url>
    </issueManagement>


    <ciManagement>
        <system>GitHub Actions</system>
        <url>https://github.com/saalfeldlab/paintera-conversion-helper/actions</url>
    </ciManagement>

    <scm>
        <connection>scm:git:git://github.com/saalfeldlab/paintera-conversion-helper</connection>
        <developerConnection>scm:git:git@github.com:saalfeldlab/paintera-conversion-helper.git</developerConnection>
        <tag>HEAD</tag>
        <url>https://github.com/saalfeldlab/paintera-conversion-helper</url>
    </scm>

    <repositories>
        <repository>
            <id>scijava.public</id>
            <url>https://maven.scijava.org/content/groups/public</url>
        </repository>
    </repositories>

    <dependencies>
        <!--	kotlin-->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
        </dependency>

        <dependency>
            <groupId>org.janelia.saalfeldlab</groupId>
            <artifactId>n5-universe</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.janelia.saalfeldlab</groupId>
            <artifactId>n5-aws-s3</artifactId>
        </dependency>
        <dependency>
            <groupId>org.janelia.saalfeldlab</groupId>
            <artifactId>n5-imglib2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.janelia.saalfeldlab</groupId>
            <artifactId>label-utilities-spark</artifactId>
            <version>${label-utilities-spark.version}</version>
        </dependency>
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli</artifactId>
        </dependency>
        <dependency>
            <groupId>org.janelia.saalfeldlab</groupId>
            <artifactId>n5</artifactId>
        </dependency>
        <dependency>
            <groupId>net.imglib2</groupId>
            <artifactId>imglib2-label-multisets</artifactId>
        </dependency>
        <dependency>
            <groupId>org.janelia.saalfeldlab</groupId>
            <artifactId>n5-spark</artifactId>
            <version>${n5-spark.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>ome</groupId>
                    <artifactId>bio-formats_plugins</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.pivovarit</groupId>
            <artifactId>throwing-function</artifactId>
            <version>1.5.1</version>
        </dependency>
        <dependency>
            <groupId>net.sf.trove4j</groupId>
            <artifactId>trove4j</artifactId>
        </dependency>

        <!--    logging-->
        <dependency>
            <groupId>io.github.oshai</groupId>
            <artifactId>kotlin-logging-jvm</artifactId>
            <version>5.1.0</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <!--	test-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test-junit5</artifactId>
            <version>${kotlin.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jline</groupId>
            <artifactId>jline</artifactId>
            <version>3.3.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <extensions>
            <!-- Used to inject the OS and architecture values in a consistent manner -->
            <!-- https://github.com/trustin/os-maven-plugin -->
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.7.0</version>
            </extension>
        </extensions>
        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
				properties for configuration. -->
                <directory>${project.basedir}/src/packaging</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
            </resource>
            <!-- Add the default resource path back in - by overriding above it disables the default -->
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/build-info/</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <argLine>
                        -Djna.library.path=/opt/homebrew/lib
                        --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
                        --add-opens=java.base/sun.security.action=ALL-UNNAMED
                    </argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- This copies the jar files declared by the Maven build into a single directory.
						This makes it easy to assemble the final installer package -->
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- Include only compile stage dependencies (no test dependencies) -->
                            <includeScope>compile</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Put the application jar generated by the project into the dependency folder - the default folder
				for the maven-dependency-plugin output. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>build-installer</id>
            <properties>
                <matrix.os>${os.name}</matrix.os>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <!-- https://github.com/wiverson/jtoolprovider-plugin -->
                        <groupId>io.github.wiverson</groupId>
                        <artifactId>jtoolprovider-plugin</artifactId>
                        <version>1.0.34</version>
                        <executions>
                            <!-- This command runs jlink, generating a custom JVM by combining this project with the JDK modules. -->
                            <execution>
                                <id>jlink</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>java-tool</goal>
                                </goals>
                                <configuration>
                                    <toolName>jlink</toolName>
                                    <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
                                    <addModules>ALL-MODULE-PATH</addModules>
                                    <output>${project.build.directory}/jvm-image</output>
                                    <args>
                                        <arg>--strip-native-commands</arg>
                                        <arg>--no-header-files</arg>
                                        <arg>--strip-debug</arg>
                                        <arg>--no-man-pages</arg>
                                    </args>
                                </configuration>
                            </execution>
                            <!-- The command that actually generates the installer. The options for each platform
							are found the /src/packaging directory. These files are copied into the target directory by
							the Maven resources plugin, which does the filtering to replace the original values with
							the actual Maven properties.
							https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
							-->
                            <execution>
                                <id>jpackage</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>java-tool</goal>
                                </goals>
                                <configuration>
                                    <!--suppress UnresolvedMavenProperty -->
                                    <mainJar>${project.build.finalName}.jar</mainJar>
                                    <toolName>jpackage</toolName>
                                    <dest>${project.build.directory}/installer-${matrix.os}</dest>
                                    <writeOutputToLog>true</writeOutputToLog>
                                    <writeErrorsToLog>true</writeErrorsToLog>
                                    <failOnError>true</failOnError>
                                    <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
                                    <args>@${project.build.directory}/packaging/${os.detected.name}/jpackage.txt</args>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>


        <!-- We use the built-in Maven profile activation system to set the platform property.
		These properties are then use to build the directory paths to the platform specific resources.
		It would be great if Maven automatically added the os family as a property by default
		 -->

        <profile>
            <id>macos-sign</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <macos.sign>--mac-sign</macos.sign>
                <!-- You will have to replace this with your own dev information from your Apple identity -->
                <macos.sign.identity>--mac-signing-key-user-name "Company Name, Inc. (BXPXTXC35S)"</macos.sign.identity>
            </properties>
        </profile>
    </profiles>

</project>
